rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId) || isAdmin();
    }
    
    // Products collection - everyone can read, only admins can write
    match /products/{productId} {
      allow read: if true;  // Allow everyone to read products (public catalog)
      allow write: if isAdmin();  // Only admins can create/update/delete
    }
    
    // Customers collection - customers can read/write their own data
    match /customers/{customerId} {
      allow read: if isOwner(customerId) || isAdmin();
      allow write: if isOwner(customerId) || isAdmin();
    }
    
    // Orders collection - users can read their own orders, admins can read all
    match /orders/{orderId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      
      // Admins can always update/delete
      allow update, delete: if isAdmin();
      
      // Technicians can update pending orders (to accept them) or their own accepted orders
      allow update: if isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'technician' &&
        (resource.data.status == 'pending' || 
         resource.data.technicianId == request.auth.uid);
    }
    
    // Sub-contractors collection - authenticated users can read, admins can write
    match /subContractors/{contractorId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Transactions collection - customers can create, admins can read/update/delete
    match /transactions/{transactionId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();  // Allow customers to log transactions
      allow update, delete: if isAdmin();
    }
    
    // Services collection - everyone can read, admins can write
    match /services/{serviceId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Customer History collection - customers can read/write their own history
    match /customerHistory/{historyId} {
      allow read: if isOwner(resource.data.customerId);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.customerId;
      allow update, delete: if isAdmin();
    }
    
    // Student data - only authenticated users can access their own data
    match /students/{studentId} {
      allow read: if isOwner(studentId);
      allow write: if isOwner(studentId);
    }
    
    // Lessons - authenticated users can read, admins can write
    match /lessons/{lessonId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Problem sets - authenticated users can read
    match /problemSets/{problemSetId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // User progress - users can only access their own progress
    match /progress/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Default deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

